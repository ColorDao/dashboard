{
  "address": "0x0A75B20aEEa651422081fbF3c041476f2191537B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "timelock_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "COLO_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPoll",
          "type": "bool"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLO",
      "outputs": [
        {
          "internalType": "contract COLOInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct GovernorAlpha.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalMaxOperations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPoll",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isPoll",
          "type": "bool"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receipts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "x",
          "type": "uint96"
        }
      ],
      "name": "sqrt",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "y",
          "type": "uint96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum GovernorAlpha.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "contract TimelockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x055e2c21fb6a8a491232511d1a79b252d12b95ec94a026a1bd7a397db7f69f1d",
  "receipt": {
    "to": null,
    "from": "0x32645c7b37a9F7876109e668490FEe83A3305b5A",
    "contractAddress": "0x0A75B20aEEa651422081fbF3c041476f2191537B",
    "transactionIndex": 7,
    "gasUsed": "2753534",
    "logsBloom": "0x
    "blockHash": "0x66ab18880b00ebf597affd916b395a960affcaa550f34e9505f5476d6c97fdce",
    "transactionHash": "0x055e2c21fb6a8a491232511d1a79b252d12b95ec94a026a1bd7a397db7f69f1d",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 8058161,
        "transactionHash": "0x055e2c21fb6a8a491232511d1a79b252d12b95ec94a026a1bd7a397db7f69f1d",
        "address": "0x0A75B20aEEa651422081fbF3c041476f2191537B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032645c7b37a9f7876109e668490fee83a3305b5a"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x66ab18880b00ebf597affd916b395a960affcaa550f34e9505f5476d6c97fdce"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 8058161,
        "transactionHash": "0x055e2c21fb6a8a491232511d1a79b252d12b95ec94a026a1bd7a397db7f69f1d",
        "address": "0x0A75B20aEEa651422081fbF3c041476f2191537B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000032645c7b37a9f7876109e668490fee83a3305b5a",
          "0x000000000000000000000000834cd15ff1001a63ef7d397c8ccd23520a654c0f"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x66ab18880b00ebf597affd916b395a960affcaa550f34e9505f5476d6c97fdce"
      }
    ],
    "blockNumber": 8058161,
    "cumulativeGasUsed": "3505065",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x99443c6134146859F52fB4e7445f718eFa105019",
    "0xbAbb62dE499C7b52399cE25Af7cE804fCf0b164f",
    "0x834Cd15FF1001a63EF7D397c8Ccd23520A654c0f"
  ],
  "solcInputHash": "042631902db1db7867110c46f6468c78",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"COLO_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPoll\",\"type\":\"bool\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLO\",\"outputs\":[{\"internalType\":\"contract COLOInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorAlpha.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPoll\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isPoll\",\"type\":\"bool\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receipts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"x\",\"type\":\"uint96\"}],\"name\":\"sqrt\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"y\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorAlpha.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"The name of this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovernorAlpha.sol\":\"GovernorAlpha\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/GovernorAlpha.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\ninterface COLOInterface {\\n  function getPriorVotes(address account, uint256 blockNumber)\\n    external\\n    view\\n    returns (uint96);\\n\\n  function burn(address account, uint256 rawAmount) external;\\n}\\n\\ncontract GovernorAlpha is Ownable {\\n  using SafeCast for uint96;\\n  /// @notice The name of this contract\\n  string public constant name = \\\"ColorDAO Governor Alpha\\\";\\n\\n  function proposalMaxOperations() public pure returns (uint256) {\\n    return 10;\\n  } // 10 actions\\n\\n  function votingDelay() public pure returns (uint256) {\\n    return 1;\\n  } // 1 block\\n\\n  function votingPeriod() public pure returns (uint256) {\\n    return 40_320;\\n  } // ~7 days in blocks (assuming 15s blocks)\\n\\n  TimelockInterface public timelock;\\n\\n  COLOInterface public COLO;\\n\\n  uint256 public proposalCount;\\n\\n  struct Proposal {\\n    uint256 id;\\n    address proposer;\\n    uint256 eta;\\n    address[] targets;\\n    uint256[] values;\\n    string[] signatures;\\n    bytes[] calldatas;\\n    uint256 startBlock;\\n    uint256 endBlock;\\n    uint256 forVotes;\\n    uint256 againstVotes;\\n    bool canceled;\\n    bool executed;\\n    bool isPoll;\\n    string description;\\n  }\\n\\n  mapping(uint256 => mapping(address => Receipt)) public receipts;\\n\\n  struct Receipt {\\n    bool hasVoted;\\n    bool support;\\n    uint96 votes;\\n  }\\n\\n  /// @notice Possible states that a proposal may be in\\n  enum ProposalState {\\n    Pending,\\n    Active,\\n    Canceled,\\n    Defeated,\\n    Succeeded,\\n    Queued,\\n    Expired,\\n    Executed\\n  }\\n\\n  mapping(uint256 => Proposal) public proposals;\\n\\n  mapping(address => uint256) public latestProposalIds;\\n\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n  bytes32 public constant BALLOT_TYPEHASH =\\n    keccak256(\\\"Ballot(uint256 proposalId,bool support)\\\");\\n\\n  event ProposalCreated(\\n    uint256 id,\\n    address proposer,\\n    address[] targets,\\n    uint256[] values,\\n    string[] signatures,\\n    bytes[] calldatas,\\n    uint256 startBlock,\\n    uint256 endBlock,\\n    string description,\\n    bool isPoll\\n  );\\n\\n  event VoteCast(\\n    address voter,\\n    uint256 proposalId,\\n    bool support,\\n    uint256 votes\\n  );\\n\\n  event ProposalCanceled(uint256 id);\\n\\n  event ProposalQueued(uint256 id, uint256 eta);\\n\\n  event ProposalExecuted(uint256 id);\\n\\n  constructor(\\n    address timelock_,\\n    address COLO_,\\n    address _governor\\n  ) {\\n    timelock = TimelockInterface(timelock_);\\n    COLO = COLOInterface(COLO_);\\n    transferOwnership(_governor);\\n  }\\n\\n  function propose(\\n    address[] memory targets,\\n    uint256[] memory values,\\n    string[] memory signatures,\\n    bytes[] memory calldatas,\\n    string memory _description,\\n    bool _isPoll\\n  ) public onlyOwner returns (uint256) {\\n    require(\\n      targets.length == values.length &&\\n        targets.length == signatures.length &&\\n        targets.length == calldatas.length,\\n      \\\"GovernorAlpha::propose: proposal function information arity mismatch\\\"\\n    );\\n    require(\\n      targets.length != 0,\\n      \\\"GovernorAlpha::propose: must provide actions\\\"\\n    );\\n    require(\\n      targets.length <= proposalMaxOperations(),\\n      \\\"GovernorAlpha::propose: too many actions\\\"\\n    );\\n\\n    uint256 latestProposalId = latestProposalIds[msg.sender];\\n    if (latestProposalId != 0) {\\n      ProposalState proposersLatestProposalState = state(latestProposalId);\\n      require(\\n        proposersLatestProposalState != ProposalState.Active,\\n        \\\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\\\"\\n      );\\n      require(\\n        proposersLatestProposalState != ProposalState.Pending,\\n        \\\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\\\"\\n      );\\n    }\\n\\n    uint256 startBlock = add256(block.number, votingDelay());\\n    uint256 endBlock = add256(startBlock, votingPeriod());\\n\\n    proposalCount++;\\n    Proposal memory newProposal =\\n      Proposal({\\n        id: proposalCount,\\n        proposer: msg.sender,\\n        eta: 0,\\n        targets: targets,\\n        values: values,\\n        signatures: signatures,\\n        calldatas: calldatas,\\n        startBlock: startBlock,\\n        endBlock: endBlock,\\n        forVotes: 0,\\n        againstVotes: 0,\\n        canceled: false,\\n        executed: false,\\n        isPoll: _isPoll,\\n        description: _description\\n      });\\n\\n    proposals[newProposal.id] = newProposal;\\n    latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n    emit ProposalCreated(\\n      newProposal.id,\\n      msg.sender,\\n      targets,\\n      values,\\n      signatures,\\n      calldatas,\\n      startBlock,\\n      endBlock,\\n      _description,\\n      _isPoll\\n    );\\n    return newProposal.id;\\n  }\\n\\n  function queue(uint256 proposalId) public {\\n    require(\\n      state(proposalId) == ProposalState.Succeeded,\\n      \\\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    if (!proposal.isPoll) {\\n      uint256 eta = add256(block.timestamp, timelock.delay());\\n      for (uint256 i = 0; i < proposal.targets.length; i++) {\\n        _queueOrRevert(\\n          proposal.targets[i],\\n          proposal.values[i],\\n          proposal.signatures[i],\\n          proposal.calldatas[i],\\n          eta\\n        );\\n      }\\n      proposal.eta = eta;\\n      emit ProposalQueued(proposalId, eta);\\n    }\\n  }\\n\\n  function _queueOrRevert(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    uint256 eta\\n  ) internal {\\n    require(\\n      !timelock.queuedTransactions(\\n        keccak256(abi.encode(target, value, signature, data, eta))\\n      ),\\n      \\\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\\\"\\n    );\\n    timelock.queueTransaction(target, value, signature, data, eta);\\n  }\\n\\n  function execute(uint256 proposalId) public payable {\\n    require(\\n      state(proposalId) == ProposalState.Queued,\\n      \\\"GovernorAlpha::execute: proposal can only be executed if it is queued\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    proposal.executed = true;\\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\\n      timelock.executeTransaction{value: proposal.values[i]}(\\n        proposal.targets[i],\\n        proposal.values[i],\\n        proposal.signatures[i],\\n        proposal.calldatas[i],\\n        proposal.eta\\n      );\\n    }\\n    emit ProposalExecuted(proposalId);\\n  }\\n\\n  function cancel(uint256 proposalId) public {\\n    ProposalState currentState = state(proposalId);\\n    require(\\n      currentState != ProposalState.Executed,\\n      \\\"GovernorAlpha::cancel: cannot cancel executed proposal\\\"\\n    );\\n\\n    Proposal storage proposal = proposals[proposalId];\\n\\n    proposal.canceled = true;\\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\\n      timelock.cancelTransaction(\\n        proposal.targets[i],\\n        proposal.values[i],\\n        proposal.signatures[i],\\n        proposal.calldatas[i],\\n        proposal.eta\\n      );\\n    }\\n\\n    emit ProposalCanceled(proposalId);\\n  }\\n\\n  function getActions(uint256 proposalId)\\n    public\\n    view\\n    returns (\\n      address[] memory targets,\\n      uint256[] memory values,\\n      string[] memory signatures,\\n      bytes[] memory calldatas\\n    )\\n  {\\n    Proposal storage p = proposals[proposalId];\\n    return (p.targets, p.values, p.signatures, p.calldatas);\\n  }\\n\\n  function getReceipt(uint256 proposalId, address voter)\\n    public\\n    view\\n    returns (Receipt memory)\\n  {\\n    return receipts[proposalId][voter];\\n  }\\n\\n  function state(uint256 proposalId) public view returns (ProposalState) {\\n    require(\\n      proposalCount >= proposalId && proposalId > 0,\\n      \\\"GovernorAlpha::state: invalid proposal id\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    if (proposal.canceled) {\\n      return ProposalState.Canceled;\\n    } else if (block.number <= proposal.startBlock) {\\n      return ProposalState.Pending;\\n    } else if (block.number <= proposal.endBlock) {\\n      return ProposalState.Active;\\n    } else if (\\n      proposal.forVotes <= proposal.againstVotes\\n      //|| proposal.forVotes < quorumVotes()\\n    ) {\\n      return ProposalState.Defeated;\\n    } else if (proposal.eta == 0) {\\n      return ProposalState.Succeeded;\\n    } else if (proposal.executed) {\\n      return ProposalState.Executed;\\n    } else if (\\n      block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\\n    ) {\\n      return ProposalState.Expired;\\n    } else {\\n      return ProposalState.Queued;\\n    }\\n  }\\n\\n  function castVote(uint256 proposalId, bool support) public {\\n    return _castVote(msg.sender, proposalId, support);\\n  }\\n\\n  function castVoteBySig(\\n    uint256 proposalId,\\n    bool support,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 domainSeparator =\\n      keccak256(\\n        abi.encode(\\n          DOMAIN_TYPEHASH,\\n          keccak256(bytes(name)),\\n          getChainId(),\\n          address(this)\\n        )\\n      );\\n    bytes32 structHash =\\n      keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\n    bytes32 digest =\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(\\n      signatory != address(0),\\n      \\\"GovernorAlpha::castVoteBySig: invalid signature\\\"\\n    );\\n    return _castVote(signatory, proposalId, support);\\n  }\\n\\n  function _castVote(\\n    address voter,\\n    uint256 proposalId,\\n    bool support\\n  ) internal {\\n    require(\\n      state(proposalId) == ProposalState.Active,\\n      \\\"GovernorAlpha::_castVote: voting is closed\\\"\\n    );\\n    Proposal storage proposal = proposals[proposalId];\\n    Receipt storage receipt = receipts[proposalId][voter];\\n    require(\\n      receipt.hasVoted == false,\\n      \\\"GovernorAlpha::_castVote: voter already voted\\\"\\n    );\\n    uint96 votes = COLO.getPriorVotes(voter, proposal.startBlock);\\n\\n    if (support) {\\n      proposal.forVotes = add256(proposal.forVotes, votes);\\n    } else {\\n      proposal.againstVotes = add256(proposal.againstVotes, votes);\\n    }\\n\\n    receipt.hasVoted = true;\\n    receipt.support = support;\\n    receipt.votes = sqrt(votes); // Here we can add quadratic vote\\n\\n    COLO.burn(voter, votes);\\n\\n    emit VoteCast(voter, proposalId, support, votes);\\n  }\\n\\n  function sqrt(uint96 x) public pure returns (uint96 y) {\\n    uint96 z = (x + 1) / 2;\\n    y = x;\\n    while (z < y) {\\n      y = z;\\n      z = (x / z + z) / 2;\\n    }\\n  }\\n\\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"addition overflow\\\");\\n    return c;\\n  }\\n\\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"subtraction underflow\\\");\\n    return a - b;\\n  }\\n\\n  function getChainId() internal pure returns (uint256) {\\n    uint256 chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\\ninterface TimelockInterface {\\n  function delay() external view returns (uint256);\\n\\n  function GRACE_PERIOD() external view returns (uint256);\\n\\n  function acceptAdmin() external;\\n\\n  function queuedTransactions(bytes32 hash) external view returns (bool);\\n\\n  function queueTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external returns (bytes32);\\n\\n  function cancelTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external;\\n\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string calldata signature,\\n    bytes calldata data,\\n    uint256 eta\\n  ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x70ba5967ec685b30625fb6cc95f87eb8ebdd3f83033ec48f4ed2cadc95f39675\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620031fb380380620031fb8339810160408190526200003491620001f7565b600062000040620000bd565b600080546001600160a01b0319166001600160a01b038316908117825560405192935091600080516020620031db833981519152908290a350600180546001600160a01b038086166001600160a01b0319928316179092556002805492851692909116919091179055620000b481620000c1565b50505062000240565b3390565b620000cb620000bd565b6001600160a01b0316620000de620001cb565b6001600160a01b0316146200013a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116620001815760405162461bcd60e51b8152600401808060200182810382526026815260200180620031b56026913960400191505060405180910390fd5b600080546040516001600160a01b0380851693921691600080516020620031db83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b80516001600160a01b0381168114620001f257600080fd5b919050565b6000806000606084860312156200020c578283fd5b6200021784620001da565b92506200022760208501620001da565b91506200023760408501620001da565b90509250925092565b612f6580620002506000396000f3fe6080604052600436106101665760003560e01c80634634c61f116100d1578063da35c6641161008a578063e23a9a5211610064578063e23a9a5214610414578063f2fde38b14610441578063f682e04c14610461578063fe0d94c11461048157610166565b8063da35c664146103ca578063ddf0b009146103df578063deaaa7cc146103ff57610166565b80634634c61f14610329578063715018a6146103495780637bdbe4d01461035e5780638da5cb5b14610373578063d0eb7c7414610388578063d33219b4146103b557610166565b806320606b701161012357806320606b7014610253578063328dd982146102685780633932abb1146102985780633e4f49e6146102ad57806340e58ee5146102da5780634178b249146102fa57610166565b8063013cf08b1461016b57806302a251a3146101ab57806306fdde03146101cd5780630ec8e358146101ef57806315373e3d1461021157806317977c6114610233575b600080fd5b34801561017757600080fd5b5061018b610186366004612356565b610494565b6040516101a29b9a99989796959493929190612db1565b60405180910390f35b3480156101b757600080fd5b506101c0610589565b6040516101a29190612763565b3480156101d957600080fd5b506101e261058f565b6040516101a291906127da565b3480156101fb57600080fd5b506102046105c2565b6040516101a291906125e5565b34801561021d57600080fd5b5061023161022c366004612399565b6105d1565b005b34801561023f57600080fd5b506101c061024e3660046121ba565b6105e0565b34801561025f57600080fd5b506101c06105f2565b34801561027457600080fd5b50610288610283366004612356565b610616565b6040516101a294939291906126ea565b3480156102a457600080fd5b506101c06108a5565b3480156102b957600080fd5b506102cd6102c8366004612356565b6108aa565b6040516101a291906127c6565b3480156102e657600080fd5b506102316102f5366004612356565b610a24565b34801561030657600080fd5b5061031a61031536600461236e565b610bb3565b6040516101a293929190612742565b34801561033557600080fd5b506102316103443660046123c8565b610bee565b34801561035557600080fd5b50610231610da1565b34801561036a57600080fd5b506101c0610e5f565b34801561037f57600080fd5b50610204610e64565b34801561039457600080fd5b506103a86103a336600461241e565b610e73565b6040516101a29190612e32565b3480156103c157600080fd5b50610204610eda565b3480156103d657600080fd5b506101c0610ee9565b3480156103eb57600080fd5b506102316103fa366004612356565b610eef565b34801561040b57600080fd5b506101c0611178565b34801561042057600080fd5b5061043461042f36600461236e565b61119c565b6040516101a29190612ce0565b34801561044d57600080fd5b5061023161045c3660046121ba565b611204565b34801561046d57600080fd5b506101c061047c3660046121d4565b611318565b61023161048f366004612356565b611727565b6005602090815260009182526040918290208054600180830154600280850154600786015460088701546009880154600a890154600b8a0154600c8b0180548e516101009b8216158c026000190190911698909804601f81018e90048e0289018e01909e528d8852999c6001600160a01b039098169b959a949993989297919660ff80831697948304811696620100009093041694919390929083018282801561057f5780601f106105545761010080835404028352916020019161057f565b820191906000526020600020905b81548152906001019060200180831161056257829003601f168201915b505050505090508b565b619d8090565b60405180604001604052806017815260200176436f6c6f7244414f20476f7665726e6f7220416c70686160481b81525081565b6002546001600160a01b031681565b6105dc3383836118ec565b5050565b60066020526000908152604090205481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6060806060806000600560008781526020019081526020016000209050806003018160040182600501836006018380548060200260200160405190810160405280929190818152602001828054801561069857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161067a575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156106ea57602002820191906000526020600020905b8154815260200190600101908083116106d6575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156107bd5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b505050505081526020019060010190610712565b50505050915080805480602002602001604051908101604052809291908181526020016000905b8282101561088f5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561087b5780601f106108505761010080835404028352916020019161087b565b820191906000526020600020905b81548152906001019060200180831161085e57829003601f168201915b5050505050815260200190600101906107e4565b5050505090509450945094509450509193509193565b600190565b600081600354101580156108be5750600082115b6108e35760405162461bcd60e51b81526004016108da906128c2565b60405180910390fd5b6000828152600560205260409020600b81015460ff1615610908576002915050610a1f565b8060070154431161091d576000915050610a1f565b80600801544311610932576001915050610a1f565b80600a015481600901541161094b576003915050610a1f565b600281015461095e576004915050610a1f565b600b810154610100900460ff161561097a576007915050610a1f565b6002810154600154604080516360d143f160e11b81529051610a0393926001600160a01b03169163c1a287e2916004808301926020929190829003018186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe91906122cb565b611b2c565b4210610a13576006915050610a1f565b6005915050610a1f565b505b919050565b6000610a2f826108aa565b90506007816007811115610a3f57fe5b1415610a5d5760405162461bcd60e51b81526004016108da90612c40565b6000828152600560205260408120600b8101805460ff19166001179055905b6003820154811015610b76576001546003830180546001600160a01b039092169163591fcdfe919084908110610aae57fe5b6000918252602090912001546004850180546001600160a01b039092169185908110610ad657fe5b9060005260206000200154856005018581548110610af057fe5b90600052602060002001866006018681548110610b0957fe5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401610b3895949392919061268f565b600060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505060019092019150610a7c9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610ba69190612763565b60405180910390a1505050565b600460209081526000928352604080842090915290825290205460ff808216916101008104909116906201000090046001600160601b031683565b604080518082019091526017815276436f6c6f7244414f20476f7665726e6f7220416c70686160481b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f40901588b0d982aaccf736bd25b7353446bf335558b365c51eb206b5f0942cde610c69611b58565b30604051602001610c7d949392919061276c565b60405160208183030381529060405280519060200120905060007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee8787604051602001610ccc93929190612790565b60405160208183030381529060405280519060200120905060008282604051602001610cf99291906125ca565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610d3694939291906127a8565b6020604051602081039080840390855afa158015610d58573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d8b5760405162461bcd60e51b81526004016108da90612b6e565b610d96818a8a6118ec565b505050505050505050565b610da9611b5c565b6001600160a01b0316610dba610e64565b6001600160a01b031614610e15576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600a90565b6000546001600160a01b031690565b806002600182016001600160601b0316045b816001600160601b0316816001600160601b03161015610a1d57809150600281826001600160601b0316856001600160601b031681610ec057fe5b04016001600160601b031681610ed257fe5b049050610e85565b6001546001600160a01b031681565b60035481565b6004610efa826108aa565b6007811115610f0557fe5b14610f225760405162461bcd60e51b81526004016108da906127ed565b6000818152600560205260409020600b81015462010000900460ff166105dc576000610f9642600160009054906101000a90046001600160a01b03166001600160a01b0316636a42b8f86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c657600080fd5b905060005b600383015481101561113e57611136836003018281548110610fb957fe5b6000918252602090912001546004850180546001600160a01b039092169184908110610fe157fe5b9060005260206000200154856005018481548110610ffb57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156110895780601f1061105e57610100808354040283529160200191611089565b820191906000526020600020905b81548152906001019060200180831161106c57829003601f168201915b505050505086600601858154811061109d57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561112b5780601f106111005761010080835404028352916020019161112b565b820191906000526020600020905b81548152906001019060200180831161110e57829003601f168201915b505050505086611b60565b600101610f9b565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290610ba69085908490612e24565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b6111a4611cbf565b5060009182526004602090815260408084206001600160a01b03939093168452918152918190208151606081018352905460ff80821615158352610100820416151593820193909352620100009092046001600160601b03169082015290565b61120c611b5c565b6001600160a01b031661121d610e64565b6001600160a01b031614611278576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166112bd5760405162461bcd60e51b8152600401808060200182810382526026815260200180612f0a6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611322611b5c565b6001600160a01b0316611333610e64565b6001600160a01b03161461138e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b855187511480156113a0575084518751145b80156113ad575083518751145b6113c95760405162461bcd60e51b81526004016108da90612a4e565b86516113e75760405162461bcd60e51b81526004016108da90612b22565b6113ef610e5f565b8751111561140f5760405162461bcd60e51b81526004016108da906129db565b33600090815260066020526040902054801561148c576000611430826108aa565b9050600181600781111561144057fe5b141561145e5760405162461bcd60e51b81526004016108da90612bbd565b600081600781111561146c57fe5b141561148a5760405162461bcd60e51b81526004016108da90612958565b505b600061149a436109fe6108a5565b905060006114aa826109fe610589565b60038054600101905590506114bd611cdf565b604051806101e001604052806003548152602001336001600160a01b03168152602001600081526020018c81526020018b81526020018a8152602001898152602001848152602001838152602001600081526020016000815260200160001515815260200160001515815260200187151581526020018881525090508060056000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002015560608201518160030190805190602001906115ae929190611d64565b50608082015180516115ca916004840191602090910190611dc9565b5060a082015180516115e6916005840191602090910190611e04565b5060c08201518051611602916006840191602090910190611e5d565b5060e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830180546101808601516101a08701511515620100000262ff00001991151590950261ff001994151560ff19909316929092179390931617919091169190911790556101c0820151805161169591600c840191602090910190611eb6565b5090505080600001516006600083602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507fe6a9cf71fc85fd54c88be8ee5d060e3ec01e210b47e77dc77142b0084996cd658160000151338d8d8d8d89898f8f6040516117109a99989796959493929190612d0e565b60405180910390a1519a9950505050505050505050565b6005611732826108aa565b600781111561173d57fe5b1461175a5760405162461bcd60e51b81526004016108da90612857565b6000818152600560205260408120600b8101805461ff001916610100179055905b60038201548110156118b0576001546004830180546001600160a01b0390921691630825f38f9190849081106117ad57fe5b90600052602060002001548460030184815481106117c757fe5b6000918252602090912001546004860180546001600160a01b0390921691869081106117ef57fe5b906000526020600020015486600501868154811061180957fe5b9060005260206000200187600601878154811061182257fe5b9060005260206000200188600201546040518763ffffffff1660e01b815260040161185195949392919061268f565b6000604051808303818588803b15801561186a57600080fd5b505af115801561187e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526118a791908101906122e3565b5060010161177b565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f826040516118e09190612763565b60405180910390a15050565b60016118f7836108aa565b600781111561190257fe5b1461191f5760405162461bcd60e51b81526004016108da90612c96565b6000828152600560209081526040808320600483528184206001600160a01b0388168552909252909120805460ff161561196b5760405162461bcd60e51b81526004016108da9061290b565b600254600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe1916119a1918a916004016125f9565b60206040518083038186803b1580156119b957600080fd5b505afa1580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f1919061243a565b90508315611a1a57611a108360090154826001600160601b0316611b2c565b6009840155611a37565b611a3183600a0154826001600160601b0316611b2c565b600a8401555b8154600160ff199091161761ff00191661010085151502178255611a5a81610e73565b82546001600160601b039190911662010000026dffffffffffffffffffffffff000019909116178255600254604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90611ab590899085906004016126c8565b600060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b505050507f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c4686868684604051611b1c9493929190612612565b60405180910390a1505050505050565b600082820183811015611b515760405162461bcd60e51b81526004016108da90612a23565b9392505050565b4690565b3390565b6001546040516001600160a01b039091169063f2b0653790611b8e9088908890889088908890602001612643565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611bc09190612763565b60206040518083038186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1091906122af565b15611c2d5760405162461bcd60e51b81526004016108da90612ab8565b600154604051633a66f90160e01b81526001600160a01b0390911690633a66f90190611c659088908890889088908890600401612643565b602060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb791906122cb565b505050505050565b604080516060810182526000808252602082018190529181019190915290565b604051806101e001604052806000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001606081525090565b828054828255906000526020600020908101928215611db9579160200282015b82811115611db957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611d84565b50611dc5929150611f31565b5090565b828054828255906000526020600020908101928215611db9579160200282015b82811115611db9578251825591602001919060010190611de9565b828054828255906000526020600020908101928215611e51579160200282015b82811115611e515782518051611e41918491602090910190611eb6565b5091602001919060010190611e24565b50611dc5929150611f46565b828054828255906000526020600020908101928215611eaa579160200282015b82811115611eaa5782518051611e9a918491602090910190611eb6565b5091602001919060010190611e7d565b50611dc5929150611f63565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611eec5760008555611db9565b82601f10611f0557805160ff1916838001178555611db9565b82800160010185558215611db95791820182811115611db9578251825591602001919060010190611de9565b5b80821115611dc55760008155600101611f32565b80821115611dc5576000611f5a8282611f80565b50600101611f46565b80821115611dc5576000611f778282611f80565b50600101611f63565b50805460018160011615610100020316600290046000825580601f10611fa65750611fc4565b601f016020900490600052602060002090810190611fc49190611f31565b50565b80356001600160a01b0381168114610a1f57600080fd5b600082601f830112611fee578081fd5b8135612001611ffc82612e6a565b612e46565b81815291506020808301908481018184028601820187101561202257600080fd5b60005b848110156120485761203682611fc7565b84529282019290820190600101612025565b505050505092915050565b600082601f830112612063578081fd5b8135612071611ffc82612e6a565b818152915060208083019084810160005b8481101561204857612099888484358a010161216c565b84529282019290820190600101612082565b600082601f8301126120bb578081fd5b81356120c9611ffc82612e6a565b818152915060208083019084810160005b84811015612048576120f1888484358a010161216c565b845292820192908201906001016120da565b600082601f830112612113578081fd5b8135612121611ffc82612e6a565b81815291506020808301908481018184028601820187101561214257600080fd5b60005b8481101561204857813584529282019290820190600101612145565b8035610a1f81612ee6565b600082601f83011261217c578081fd5b813561218a611ffc82612e88565b91508082528360208285010111156121a157600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156121cb578081fd5b611b5182611fc7565b60008060008060008060c087890312156121ec578182fd5b863567ffffffffffffffff80821115612203578384fd5b61220f8a838b01611fde565b97506020890135915080821115612224578384fd5b6122308a838b01612103565b96506040890135915080821115612245578384fd5b6122518a838b016120ab565b95506060890135915080821115612266578384fd5b6122728a838b01612053565b94506080890135915080821115612287578384fd5b5061229489828a0161216c565b9250506122a360a08801612161565b90509295509295509295565b6000602082840312156122c0578081fd5b8151611b5181612ee6565b6000602082840312156122dc578081fd5b5051919050565b6000602082840312156122f4578081fd5b815167ffffffffffffffff81111561230a578182fd5b8201601f8101841361231a578182fd5b8051612328611ffc82612e88565b81815285602083850101111561233c578384fd5b61234d826020830160208601612eb6565b95945050505050565b600060208284031215612367578081fd5b5035919050565b60008060408385031215612380578182fd5b8235915061239060208401611fc7565b90509250929050565b600080604083850312156123ab578182fd5b8235915060208301356123bd81612ee6565b809150509250929050565b600080600080600060a086880312156123df578283fd5b8535945060208601356123f181612ee6565b9350604086013560ff81168114612406578384fd5b94979396509394606081013594506080013592915050565b60006020828403121561242f578081fd5b8135611b5181612ef4565b60006020828403121561244b578081fd5b8151611b5181612ef4565b6000815180845260208085019450808401835b8381101561248e5781516001600160a01b031687529582019590820190600101612469565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b858110156124df5782840389526124cd84835161251b565b988501989350908401906001016124b5565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561248e578151875295820195908201906001016124ff565b60008151808452612533816020860160208601612eb6565b601f01601f19169290920160200192915050565b600081546001808216600081146125655760018114612583576125c1565b60028304607f16865260ff19831660208701526040860193506125c1565b6002830480875261259386612eaa565b60005b828110156125b75781546020828b0101528482019150602081019050612596565b8801602001955050505b50505092915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252151560408301526001600160601b0316606082015260800190565b600060018060a01b038716825285602083015260a0604083015261266a60a083018661251b565b828103606084015261267c818661251b565b9150508260808301529695505050505050565b600060018060a01b038716825285602083015260a060408301526126b660a0830186612547565b828103606084015261267c8186612547565b6001600160a01b039290921682526001600160601b0316602082015260400190565b6000608082526126fd6080830187612456565b828103602084015261270f81876124ec565b905082810360408401526127238186612499565b905082810360608401526127378185612499565b979650505050505050565b921515835290151560208301526001600160601b0316604082015260600190565b90815260200190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208101600883106127d457fe5b91905290565b600060208252611b51602083018461251b565b60208082526044908201527f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206360408201527f616e206f6e6c79206265207175657565642069662069742069732073756363656060820152631959195960e21b608082015260a00190565b60208082526045908201527f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60408201527f2063616e206f6e6c7920626520657865637574656420696620697420697320716060820152641d595d595960da1b608082015260a00190565b60208082526029908201527f476f7665726e6f72416c7068613a3a73746174653a20696e76616c69642070726040820152681bdc1bdcd85b081a5960ba1b606082015260800190565b6020808252602d908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722060408201526c185b1c9958591e481d9bdd1959609a1b606082015260800190565b60208082526059908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608082015260a00190565b60208082526028908201527f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7960408201526720616374696f6e7360c01b606082015260800190565b6020808252601190820152706164646974696f6e206f766572666c6f7760781b604082015260600190565b60208082526044908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c60408201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6060820152630c2e8c6d60e31b608082015260a00190565b60208082526044908201527f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207060408201527f726f706f73616c20616374696f6e20616c7265616479207175657565642061746060820152632065746160e01b608082015260a00190565b6020808252602c908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f60408201526b7669646520616374696f6e7360a01b606082015260800190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e60408201526e76616c6964207369676e617475726560881b606082015260800190565b60208082526058908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608082015260a00190565b60208082526036908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f742063616040820152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b606082015260800190565b6020808252602a908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e67604082015269081a5cc818db1bdcd95960b21b606082015260800190565b8151151581526020808301511515908201526040918201516001600160601b03169181019190915260600190565b8a81526001600160a01b038a16602082015261014060408201819052600090612d398382018c612456565b90508281036060840152612d4d818b6124ec565b90508281036080840152612d61818a612499565b905082810360a0840152612d758189612499565b90508660c08401528560e0840152828103610100840152612d96818661251b565b9150508215156101208301529b9a5050505050505050505050565b60006101608d835260018060a01b038d1660208401528b60408401528a60608401528960808401528860a08401528760c084015286151560e084015285151561010084015284151561012084015280610140840152612e128184018561251b565b9e9d5050505050505050505050505050565b918252602082015260400190565b6001600160601b0391909116815260200190565b60405181810167ffffffffffffffff81118282101715612e6257fe5b604052919050565b600067ffffffffffffffff821115612e7e57fe5b5060209081020190565b600067ffffffffffffffff821115612e9c57fe5b50601f01601f191660200190565b60009081526020902090565b60005b83811015612ed1578181015183820152602001612eb9565b83811115612ee0576000848401525b50505050565b8015158114611fc457600080fd5b6001600160601b0381168114611fc457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220a479cf5635d2c20cbd61e4f39f0630dc0501715dc33e8f2fbff7865ee543e51464736f6c634300070500334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573738be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x6080604052600436106101665760003560e01c80634634c61f116100d1578063da35c6641161008a578063e23a9a5211610064578063e23a9a5214610414578063f2fde38b14610441578063f682e04c14610461578063fe0d94c11461048157610166565b8063da35c664146103ca578063ddf0b009146103df578063deaaa7cc146103ff57610166565b80634634c61f14610329578063715018a6146103495780637bdbe4d01461035e5780638da5cb5b14610373578063d0eb7c7414610388578063d33219b4146103b557610166565b806320606b701161012357806320606b7014610253578063328dd982146102685780633932abb1146102985780633e4f49e6146102ad57806340e58ee5146102da5780634178b249146102fa57610166565b8063013cf08b1461016b57806302a251a3146101ab57806306fdde03146101cd5780630ec8e358146101ef57806315373e3d1461021157806317977c6114610233575b600080fd5b34801561017757600080fd5b5061018b610186366004612356565b610494565b6040516101a29b9a99989796959493929190612db1565b60405180910390f35b3480156101b757600080fd5b506101c0610589565b6040516101a29190612763565b3480156101d957600080fd5b506101e261058f565b6040516101a291906127da565b3480156101fb57600080fd5b506102046105c2565b6040516101a291906125e5565b34801561021d57600080fd5b5061023161022c366004612399565b6105d1565b005b34801561023f57600080fd5b506101c061024e3660046121ba565b6105e0565b34801561025f57600080fd5b506101c06105f2565b34801561027457600080fd5b50610288610283366004612356565b610616565b6040516101a294939291906126ea565b3480156102a457600080fd5b506101c06108a5565b3480156102b957600080fd5b506102cd6102c8366004612356565b6108aa565b6040516101a291906127c6565b3480156102e657600080fd5b506102316102f5366004612356565b610a24565b34801561030657600080fd5b5061031a61031536600461236e565b610bb3565b6040516101a293929190612742565b34801561033557600080fd5b506102316103443660046123c8565b610bee565b34801561035557600080fd5b50610231610da1565b34801561036a57600080fd5b506101c0610e5f565b34801561037f57600080fd5b50610204610e64565b34801561039457600080fd5b506103a86103a336600461241e565b610e73565b6040516101a29190612e32565b3480156103c157600080fd5b50610204610eda565b3480156103d657600080fd5b506101c0610ee9565b3480156103eb57600080fd5b506102316103fa366004612356565b610eef565b34801561040b57600080fd5b506101c0611178565b34801561042057600080fd5b5061043461042f36600461236e565b61119c565b6040516101a29190612ce0565b34801561044d57600080fd5b5061023161045c3660046121ba565b611204565b34801561046d57600080fd5b506101c061047c3660046121d4565b611318565b61023161048f366004612356565b611727565b6005602090815260009182526040918290208054600180830154600280850154600786015460088701546009880154600a890154600b8a0154600c8b0180548e516101009b8216158c026000190190911698909804601f81018e90048e0289018e01909e528d8852999c6001600160a01b039098169b959a949993989297919660ff80831697948304811696620100009093041694919390929083018282801561057f5780601f106105545761010080835404028352916020019161057f565b820191906000526020600020905b81548152906001019060200180831161056257829003601f168201915b505050505090508b565b619d8090565b60405180604001604052806017815260200176436f6c6f7244414f20476f7665726e6f7220416c70686160481b81525081565b6002546001600160a01b031681565b6105dc3383836118ec565b5050565b60066020526000908152604090205481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6060806060806000600560008781526020019081526020016000209050806003018160040182600501836006018380548060200260200160405190810160405280929190818152602001828054801561069857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161067a575b50505050509350828054806020026020016040519081016040528092919081815260200182805480156106ea57602002820191906000526020600020905b8154815260200190600101908083116106d6575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b828210156107bd5760008481526020908190208301805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156107a95780601f1061077e576101008083540402835291602001916107a9565b820191906000526020600020905b81548152906001019060200180831161078c57829003601f168201915b505050505081526020019060010190610712565b50505050915080805480602002602001604051908101604052809291908181526020016000905b8282101561088f5760008481526020908190208301805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561087b5780601f106108505761010080835404028352916020019161087b565b820191906000526020600020905b81548152906001019060200180831161085e57829003601f168201915b5050505050815260200190600101906107e4565b5050505090509450945094509450509193509193565b600190565b600081600354101580156108be5750600082115b6108e35760405162461bcd60e51b81526004016108da906128c2565b60405180910390fd5b6000828152600560205260409020600b81015460ff1615610908576002915050610a1f565b8060070154431161091d576000915050610a1f565b80600801544311610932576001915050610a1f565b80600a015481600901541161094b576003915050610a1f565b600281015461095e576004915050610a1f565b600b810154610100900460ff161561097a576007915050610a1f565b6002810154600154604080516360d143f160e11b81529051610a0393926001600160a01b03169163c1a287e2916004808301926020929190829003018186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe91906122cb565b611b2c565b4210610a13576006915050610a1f565b6005915050610a1f565b505b919050565b6000610a2f826108aa565b90506007816007811115610a3f57fe5b1415610a5d5760405162461bcd60e51b81526004016108da90612c40565b6000828152600560205260408120600b8101805460ff19166001179055905b6003820154811015610b76576001546003830180546001600160a01b039092169163591fcdfe919084908110610aae57fe5b6000918252602090912001546004850180546001600160a01b039092169185908110610ad657fe5b9060005260206000200154856005018581548110610af057fe5b90600052602060002001866006018681548110610b0957fe5b9060005260206000200187600201546040518663ffffffff1660e01b8152600401610b3895949392919061268f565b600060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b505060019092019150610a7c9050565b507f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c83604051610ba69190612763565b60405180910390a1505050565b600460209081526000928352604080842090915290825290205460ff808216916101008104909116906201000090046001600160601b031683565b604080518082019091526017815276436f6c6f7244414f20476f7665726e6f7220416c70686160481b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667f40901588b0d982aaccf736bd25b7353446bf335558b365c51eb206b5f0942cde610c69611b58565b30604051602001610c7d949392919061276c565b60405160208183030381529060405280519060200120905060007f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee8787604051602001610ccc93929190612790565b60405160208183030381529060405280519060200120905060008282604051602001610cf99291906125ca565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610d3694939291906127a8565b6020604051602081039080840390855afa158015610d58573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d8b5760405162461bcd60e51b81526004016108da90612b6e565b610d96818a8a6118ec565b505050505050505050565b610da9611b5c565b6001600160a01b0316610dba610e64565b6001600160a01b031614610e15576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600a90565b6000546001600160a01b031690565b806002600182016001600160601b0316045b816001600160601b0316816001600160601b03161015610a1d57809150600281826001600160601b0316856001600160601b031681610ec057fe5b04016001600160601b031681610ed257fe5b049050610e85565b6001546001600160a01b031681565b60035481565b6004610efa826108aa565b6007811115610f0557fe5b14610f225760405162461bcd60e51b81526004016108da906127ed565b6000818152600560205260409020600b81015462010000900460ff166105dc576000610f9642600160009054906101000a90046001600160a01b03166001600160a01b0316636a42b8f86040518163ffffffff1660e01b815260040160206040518083038186803b1580156109c657600080fd5b905060005b600383015481101561113e57611136836003018281548110610fb957fe5b6000918252602090912001546004850180546001600160a01b039092169184908110610fe157fe5b9060005260206000200154856005018481548110610ffb57fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156110895780601f1061105e57610100808354040283529160200191611089565b820191906000526020600020905b81548152906001019060200180831161106c57829003601f168201915b505050505086600601858154811061109d57fe5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529283018282801561112b5780601f106111005761010080835404028352916020019161112b565b820191906000526020600020905b81548152906001019060200180831161110e57829003601f168201915b505050505086611b60565b600101610f9b565b50600282018190556040517f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda289290610ba69085908490612e24565b7f8e25870c07e0b0b3884c78da52790939a455c275406c44ae8b434b692fb916ee81565b6111a4611cbf565b5060009182526004602090815260408084206001600160a01b03939093168452918152918190208151606081018352905460ff80821615158352610100820416151593820193909352620100009092046001600160601b03169082015290565b61120c611b5c565b6001600160a01b031661121d610e64565b6001600160a01b031614611278576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166112bd5760405162461bcd60e51b8152600401808060200182810382526026815260200180612f0a6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000611322611b5c565b6001600160a01b0316611333610e64565b6001600160a01b03161461138e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b855187511480156113a0575084518751145b80156113ad575083518751145b6113c95760405162461bcd60e51b81526004016108da90612a4e565b86516113e75760405162461bcd60e51b81526004016108da90612b22565b6113ef610e5f565b8751111561140f5760405162461bcd60e51b81526004016108da906129db565b33600090815260066020526040902054801561148c576000611430826108aa565b9050600181600781111561144057fe5b141561145e5760405162461bcd60e51b81526004016108da90612bbd565b600081600781111561146c57fe5b141561148a5760405162461bcd60e51b81526004016108da90612958565b505b600061149a436109fe6108a5565b905060006114aa826109fe610589565b60038054600101905590506114bd611cdf565b604051806101e001604052806003548152602001336001600160a01b03168152602001600081526020018c81526020018b81526020018a8152602001898152602001848152602001838152602001600081526020016000815260200160001515815260200160001515815260200187151581526020018881525090508060056000836000015181526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816002015560608201518160030190805190602001906115ae929190611d64565b50608082015180516115ca916004840191602090910190611dc9565b5060a082015180516115e6916005840191602090910190611e04565b5060c08201518051611602916006840191602090910190611e5d565b5060e082015160078201556101008083015160088301556101208301516009830155610140830151600a830155610160830151600b830180546101808601516101a08701511515620100000262ff00001991151590950261ff001994151560ff19909316929092179390931617919091169190911790556101c0820151805161169591600c840191602090910190611eb6565b5090505080600001516006600083602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055507fe6a9cf71fc85fd54c88be8ee5d060e3ec01e210b47e77dc77142b0084996cd658160000151338d8d8d8d89898f8f6040516117109a99989796959493929190612d0e565b60405180910390a1519a9950505050505050505050565b6005611732826108aa565b600781111561173d57fe5b1461175a5760405162461bcd60e51b81526004016108da90612857565b6000818152600560205260408120600b8101805461ff001916610100179055905b60038201548110156118b0576001546004830180546001600160a01b0390921691630825f38f9190849081106117ad57fe5b90600052602060002001548460030184815481106117c757fe5b6000918252602090912001546004860180546001600160a01b0390921691869081106117ef57fe5b906000526020600020015486600501868154811061180957fe5b9060005260206000200187600601878154811061182257fe5b9060005260206000200188600201546040518763ffffffff1660e01b815260040161185195949392919061268f565b6000604051808303818588803b15801561186a57600080fd5b505af115801561187e573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526118a791908101906122e3565b5060010161177b565b507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f826040516118e09190612763565b60405180910390a15050565b60016118f7836108aa565b600781111561190257fe5b1461191f5760405162461bcd60e51b81526004016108da90612c96565b6000828152600560209081526040808320600483528184206001600160a01b0388168552909252909120805460ff161561196b5760405162461bcd60e51b81526004016108da9061290b565b600254600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe1916119a1918a916004016125f9565b60206040518083038186803b1580156119b957600080fd5b505afa1580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f1919061243a565b90508315611a1a57611a108360090154826001600160601b0316611b2c565b6009840155611a37565b611a3183600a0154826001600160601b0316611b2c565b600a8401555b8154600160ff199091161761ff00191661010085151502178255611a5a81610e73565b82546001600160601b039190911662010000026dffffffffffffffffffffffff000019909116178255600254604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac90611ab590899085906004016126c8565b600060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b505050507f877856338e13f63d0c36822ff0ef736b80934cd90574a3a5bc9262c39d217c4686868684604051611b1c9493929190612612565b60405180910390a1505050505050565b600082820183811015611b515760405162461bcd60e51b81526004016108da90612a23565b9392505050565b4690565b3390565b6001546040516001600160a01b039091169063f2b0653790611b8e9088908890889088908890602001612643565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611bc09190612763565b60206040518083038186803b158015611bd857600080fd5b505afa158015611bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1091906122af565b15611c2d5760405162461bcd60e51b81526004016108da90612ab8565b600154604051633a66f90160e01b81526001600160a01b0390911690633a66f90190611c659088908890889088908890600401612643565b602060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb791906122cb565b505050505050565b604080516060810182526000808252602082018190529181019190915290565b604051806101e001604052806000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081526020016060815260200160008152602001600081526020016000815260200160008152602001600015158152602001600015158152602001600015158152602001606081525090565b828054828255906000526020600020908101928215611db9579160200282015b82811115611db957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611d84565b50611dc5929150611f31565b5090565b828054828255906000526020600020908101928215611db9579160200282015b82811115611db9578251825591602001919060010190611de9565b828054828255906000526020600020908101928215611e51579160200282015b82811115611e515782518051611e41918491602090910190611eb6565b5091602001919060010190611e24565b50611dc5929150611f46565b828054828255906000526020600020908101928215611eaa579160200282015b82811115611eaa5782518051611e9a918491602090910190611eb6565b5091602001919060010190611e7d565b50611dc5929150611f63565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611eec5760008555611db9565b82601f10611f0557805160ff1916838001178555611db9565b82800160010185558215611db95791820182811115611db9578251825591602001919060010190611de9565b5b80821115611dc55760008155600101611f32565b80821115611dc5576000611f5a8282611f80565b50600101611f46565b80821115611dc5576000611f778282611f80565b50600101611f63565b50805460018160011615610100020316600290046000825580601f10611fa65750611fc4565b601f016020900490600052602060002090810190611fc49190611f31565b50565b80356001600160a01b0381168114610a1f57600080fd5b600082601f830112611fee578081fd5b8135612001611ffc82612e6a565b612e46565b81815291506020808301908481018184028601820187101561202257600080fd5b60005b848110156120485761203682611fc7565b84529282019290820190600101612025565b505050505092915050565b600082601f830112612063578081fd5b8135612071611ffc82612e6a565b818152915060208083019084810160005b8481101561204857612099888484358a010161216c565b84529282019290820190600101612082565b600082601f8301126120bb578081fd5b81356120c9611ffc82612e6a565b818152915060208083019084810160005b84811015612048576120f1888484358a010161216c565b845292820192908201906001016120da565b600082601f830112612113578081fd5b8135612121611ffc82612e6a565b81815291506020808301908481018184028601820187101561214257600080fd5b60005b8481101561204857813584529282019290820190600101612145565b8035610a1f81612ee6565b600082601f83011261217c578081fd5b813561218a611ffc82612e88565b91508082528360208285010111156121a157600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156121cb578081fd5b611b5182611fc7565b60008060008060008060c087890312156121ec578182fd5b863567ffffffffffffffff80821115612203578384fd5b61220f8a838b01611fde565b97506020890135915080821115612224578384fd5b6122308a838b01612103565b96506040890135915080821115612245578384fd5b6122518a838b016120ab565b95506060890135915080821115612266578384fd5b6122728a838b01612053565b94506080890135915080821115612287578384fd5b5061229489828a0161216c565b9250506122a360a08801612161565b90509295509295509295565b6000602082840312156122c0578081fd5b8151611b5181612ee6565b6000602082840312156122dc578081fd5b5051919050565b6000602082840312156122f4578081fd5b815167ffffffffffffffff81111561230a578182fd5b8201601f8101841361231a578182fd5b8051612328611ffc82612e88565b81815285602083850101111561233c578384fd5b61234d826020830160208601612eb6565b95945050505050565b600060208284031215612367578081fd5b5035919050565b60008060408385031215612380578182fd5b8235915061239060208401611fc7565b90509250929050565b600080604083850312156123ab578182fd5b8235915060208301356123bd81612ee6565b809150509250929050565b600080600080600060a086880312156123df578283fd5b8535945060208601356123f181612ee6565b9350604086013560ff81168114612406578384fd5b94979396509394606081013594506080013592915050565b60006020828403121561242f578081fd5b8135611b5181612ef4565b60006020828403121561244b578081fd5b8151611b5181612ef4565b6000815180845260208085019450808401835b8381101561248e5781516001600160a01b031687529582019590820190600101612469565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b858110156124df5782840389526124cd84835161251b565b988501989350908401906001016124b5565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561248e578151875295820195908201906001016124ff565b60008151808452612533816020860160208601612eb6565b601f01601f19169290920160200192915050565b600081546001808216600081146125655760018114612583576125c1565b60028304607f16865260ff19831660208701526040860193506125c1565b6002830480875261259386612eaa565b60005b828110156125b75781546020828b0101528482019150602081019050612596565b8801602001955050505b50505092915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039490941684526020840192909252151560408301526001600160601b0316606082015260800190565b600060018060a01b038716825285602083015260a0604083015261266a60a083018661251b565b828103606084015261267c818661251b565b9150508260808301529695505050505050565b600060018060a01b038716825285602083015260a060408301526126b660a0830186612547565b828103606084015261267c8186612547565b6001600160a01b039290921682526001600160601b0316602082015260400190565b6000608082526126fd6080830187612456565b828103602084015261270f81876124ec565b905082810360408401526127238186612499565b905082810360608401526127378185612499565b979650505050505050565b921515835290151560208301526001600160601b0316604082015260600190565b90815260200190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b92835260208301919091521515604082015260600190565b93845260ff9290921660208401526040830152606082015260800190565b60208101600883106127d457fe5b91905290565b600060208252611b51602083018461251b565b60208082526044908201527f476f7665726e6f72416c7068613a3a71756575653a2070726f706f73616c206360408201527f616e206f6e6c79206265207175657565642069662069742069732073756363656060820152631959195960e21b608082015260a00190565b60208082526045908201527f476f7665726e6f72416c7068613a3a657865637574653a2070726f706f73616c60408201527f2063616e206f6e6c7920626520657865637574656420696620697420697320716060820152641d595d595960da1b608082015260a00190565b60208082526029908201527f476f7665726e6f72416c7068613a3a73746174653a20696e76616c69642070726040820152681bdc1bdcd85b081a5960ba1b606082015260800190565b6020808252602d908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f7465722060408201526c185b1c9958591e481d9bdd1959609a1b606082015260800190565b60208082526059908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608082015260a00190565b60208082526028908201527f476f7665726e6f72416c7068613a3a70726f706f73653a20746f6f206d616e7960408201526720616374696f6e7360c01b606082015260800190565b6020808252601190820152706164646974696f6e206f766572666c6f7760781b604082015260600190565b60208082526044908201527f476f7665726e6f72416c7068613a3a70726f706f73653a2070726f706f73616c60408201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6060820152630c2e8c6d60e31b608082015260a00190565b60208082526044908201527f476f7665726e6f72416c7068613a3a5f71756575654f725265766572743a207060408201527f726f706f73616c20616374696f6e20616c7265616479207175657565642061746060820152632065746160e01b608082015260a00190565b6020808252602c908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206d7573742070726f60408201526b7669646520616374696f6e7360a01b606082015260800190565b6020808252602f908201527f476f7665726e6f72416c7068613a3a63617374566f746542795369673a20696e60408201526e76616c6964207369676e617475726560881b606082015260800190565b60208082526058908201527f476f7665726e6f72416c7068613a3a70726f706f73653a206f6e65206c69766560408201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60608201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608082015260a00190565b60208082526036908201527f476f7665726e6f72416c7068613a3a63616e63656c3a2063616e6e6f742063616040820152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b606082015260800190565b6020808252602a908201527f476f7665726e6f72416c7068613a3a5f63617374566f74653a20766f74696e67604082015269081a5cc818db1bdcd95960b21b606082015260800190565b8151151581526020808301511515908201526040918201516001600160601b03169181019190915260600190565b8a81526001600160a01b038a16602082015261014060408201819052600090612d398382018c612456565b90508281036060840152612d4d818b6124ec565b90508281036080840152612d61818a612499565b905082810360a0840152612d758189612499565b90508660c08401528560e0840152828103610100840152612d96818661251b565b9150508215156101208301529b9a5050505050505050505050565b60006101608d835260018060a01b038d1660208401528b60408401528a60608401528960808401528860a08401528760c084015286151560e084015285151561010084015284151561012084015280610140840152612e128184018561251b565b9e9d5050505050505050505050505050565b918252602082015260400190565b6001600160601b0391909116815260200190565b60405181810167ffffffffffffffff81118282101715612e6257fe5b604052919050565b600067ffffffffffffffff821115612e7e57fe5b5060209081020190565b600067ffffffffffffffff821115612e9c57fe5b50601f01601f191660200190565b60009081526020902090565b60005b83811015612ed1578181015183820152602001612eb9565b83811115612ee0576000848401525b50505050565b8015158114611fc457600080fd5b6001600160601b0381168114611fc457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220a479cf5635d2c20cbd61e4f39f0630dc0501715dc33e8f2fbff7865ee543e51464736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "name()": {
        "notice": "The name of this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4937,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "timelock",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TimelockInterface)6050"
      },
      {
        "astId": 4939,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "COLO",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(COLOInterface)4902"
      },
      {
        "astId": 4941,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposalCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4982,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "receipts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)4989_storage))"
      },
      {
        "astId": 5002,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "proposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Proposal)4976_storage)"
      },
      {
        "astId": 5006,
        "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(COLOInterface)4902": {
        "encoding": "inplace",
        "label": "contract COLOInterface",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockInterface)6050": {
        "encoding": "inplace",
        "label": "contract TimelockInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Receipt)4989_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GovernorAlpha.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)4989_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Receipt)4989_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct GovernorAlpha.Receipt))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Receipt)4989_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)4976_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorAlpha.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)4976_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)4976_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Proposal",
        "members": [
          {
            "astId": 4943,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4945,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4947,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4950,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "targets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4953,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 4956,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "signatures",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 4959,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "calldatas",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 4961,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 4963,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "endBlock",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 4965,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "forVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 4967,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "againstVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 4969,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "canceled",
            "offset": 0,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4971,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "executed",
            "offset": 1,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4973,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "isPoll",
            "offset": 2,
            "slot": "11",
            "type": "t_bool"
          },
          {
            "astId": 4975,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "description",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Receipt)4989_storage": {
        "encoding": "inplace",
        "label": "struct GovernorAlpha.Receipt",
        "members": [
          {
            "astId": 4984,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4986,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4988,
            "contract": "contracts/GovernorAlpha.sol:GovernorAlpha",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}