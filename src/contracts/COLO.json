{
  "address": "0x28C70Ecce90A8f765523b6eca42B44493f3544F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "memberships",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pointSale",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "prooOfAction",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x986c4aa4ac6e4eac082ed8bafff039c2d06eaabb239c4d9e5bae0cf1bf0f6eb5",
  "receipt": {
    "to": null,
    "from": "0x32645c7b37a9F7876109e668490FEe83A3305b5A",
    "contractAddress": "0x28C70Ecce90A8f765523b6eca42B44493f3544F1",
    "transactionIndex": 16,
    "gasUsed": "2270630",
    "logsBloom": "0x
    "blockHash": "0x519afd77e67fba71208d2ee4fe22c8fccaba70b29db7b9433ce0aa287ea79c18",
    "transactionHash": "0x986c4aa4ac6e4eac082ed8bafff039c2d06eaabb239c4d9e5bae0cf1bf0f6eb5",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 8058569,
        "transactionHash": "0x986c4aa4ac6e4eac082ed8bafff039c2d06eaabb239c4d9e5bae0cf1bf0f6eb5",
        "address": "0x28C70Ecce90A8f765523b6eca42B44493f3544F1",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000032645c7b37a9f7876109e668490fee83a3305b5a"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 17,
        "blockHash": "0x519afd77e67fba71208d2ee4fe22c8fccaba70b29db7b9433ce0aa287ea79c18"
      },
      {
        "transactionIndex": 16,
        "blockNumber": 8058569,
        "transactionHash": "0x986c4aa4ac6e4eac082ed8bafff039c2d06eaabb239c4d9e5bae0cf1bf0f6eb5",
        "address": "0x28C70Ecce90A8f765523b6eca42B44493f3544F1",
        "topics": [
          "0x3c091dafb1d99e4a4c333024492eac3b2cd8bf921a3dd547c937db33be307bb8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a1eec20b20119a7fa012e3f50f2d580ef442a40",
        "logIndex": 18,
        "blockHash": "0x519afd77e67fba71208d2ee4fe22c8fccaba70b29db7b9433ce0aa287ea79c18"
      }
    ],
    "blockNumber": 8058569,
    "cumulativeGasUsed": "4496954",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32645c7b37a9F7876109e668490FEe83A3305b5A",
    "0x3A1Eec20B20119a7FA012e3f50F2D580ef442a40",
    "0x9a9a29E8d56d2e9536BF98F1652F0a233c0E4b6B",
    "0x4D77FA602F8205783E971c14853a73B6A4118D0a"
  ],
  "solcInputHash": "5144e77d1106c20620e54fa3c80d7988",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"memberships\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pointSale\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prooOfAction\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/COLO.sol\":\"COLO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/COLO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract COLO {\\n  string public constant name = \\\"ColorDAO\\\";\\n  string public constant symbol = \\\"COLO\\\";\\n  uint8 public constant decimals = 18;\\n  uint256 public totalSupply = 0;\\n  mapping(address => bool) public minters;\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n  mapping(address => uint96) internal balances;\\n  mapping(address => address) public delegates;\\n  bool public transferBlocked;\\n\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\n      \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n  bytes32 public constant DELEGATION_TYPEHASH =\\n    keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256(\\n      \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n    );\\n\\n  mapping(address => uint256) public nonces;\\n\\n  event MinterAdded(address minter, address newMinter);\\n\\n  event MinterRemoved(address minter, address newMinter);\\n\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed fromDelegate,\\n    address indexed toDelegate\\n  );\\n\\n  event DelegateVotesChanged(\\n    address indexed delegate,\\n    uint256 previousBalance,\\n    uint256 newBalance\\n  );\\n\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  event Approval(\\n    address indexed owner,\\n    address indexed spender,\\n    uint256 amount\\n  );\\n\\n  constructor(\\n    address account,\\n    address memberships,\\n    address pointSale,\\n    address prooOfAction\\n  ) {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n    minters[account] = true;\\n    minters[memberships] = true;\\n    minters[pointSale] = true;\\n    minters[prooOfAction] = true;\\n    emit MinterAdded(address(0), memberships);\\n    transferBlocked = true;\\n  }\\n\\n  function addMinter(address minter_) external {\\n    require(\\n      minters[msg.sender],\\n      \\\"COLO::addMinter: only the minter can change the minters\\\"\\n    );\\n    emit MinterAdded(msg.sender, minter_);\\n    minters[minter_] = true;\\n  }\\n\\n  function removeMinter(address minter_) external {\\n    require(\\n      minters[msg.sender],\\n      \\\"COLO::addMinter: only the minter can change the minters \\\"\\n    );\\n    emit MinterRemoved(msg.sender, minter_);\\n    minters[minter_] = false;\\n  }\\n\\n  function mint(address dst, uint256 rawAmount) external {\\n    require(minters[msg.sender], \\\"COLO::mint: only the minter can mint\\\");\\n    require(\\n      dst != address(0),\\n      \\\"COLO::mint: cannot transfer to the zero address\\\"\\n    );\\n    require(\\n      dst != address(this),\\n      \\\"COLO::mint: cannot transfer to the COLO address\\\"\\n    );\\n\\n    uint96 amount = safe96(rawAmount, \\\"COLO::mint: amount exceeds 96 bits\\\");\\n    totalSupply = safe96(\\n      SafeMath.add(totalSupply, amount),\\n      \\\"COLO::mint: totalSupply exceeds 96 bits\\\"\\n    );\\n\\n    balances[dst] = add96(\\n      balances[dst],\\n      amount,\\n      \\\"COLO::mint: transfer amount overflows\\\"\\n    );\\n    emit Transfer(address(0), dst, amount);\\n\\n    _moveDelegates(address(0), delegates[dst], amount);\\n  }\\n\\n  function burn(address account, uint256 rawAmount) external {\\n    require(minters[msg.sender], \\\"COLO::mint: only the minter can burn\\\");\\n    require(account != address(0), \\\"COLO: burn from the zero address\\\");\\n    uint96 amount = safe96(rawAmount, \\\"COLO::mint: amount exceeds 96 bits\\\");\\n    balances[account] = sub96(\\n      balances[account],\\n      amount,\\n      \\\"COLO: burn amount exceeds balance\\\"\\n    );\\n\\n    totalSupply = safe96(\\n      SafeMath.sub(totalSupply, amount),\\n      \\\"COLO::burn: totalSupply exceeds 96 bits\\\"\\n    );\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function allowance(address account, address spender)\\n    external\\n    view\\n    returns (uint256)\\n  {\\n    return allowances[account][spender];\\n  }\\n\\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == uint256(-1)) {\\n      amount = uint96(-1);\\n    } else {\\n      amount = safe96(rawAmount, \\\"COLO::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 rawAmount,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    uint96 amount;\\n    if (rawAmount == uint256(-1)) {\\n      amount = uint96(-1);\\n    } else {\\n      amount = safe96(rawAmount, \\\"COLO::permit: amount exceeds 96 bits\\\");\\n    }\\n\\n    bytes32 domainSeparator =\\n      keccak256(\\n        abi.encode(\\n          DOMAIN_TYPEHASH,\\n          keccak256(bytes(name)),\\n          getChainId(),\\n          address(this)\\n        )\\n      );\\n    bytes32 structHash =\\n      keccak256(\\n        abi.encode(\\n          PERMIT_TYPEHASH,\\n          owner,\\n          spender,\\n          rawAmount,\\n          nonces[owner]++,\\n          deadline\\n        )\\n      );\\n    bytes32 digest =\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"COLO::permit: invalid signature\\\");\\n    require(signatory == owner, \\\"COLO::permit: unauthorized\\\");\\n    require(block.timestamp <= deadline, \\\"COLO::permit: signature expired\\\");\\n\\n    allowances[owner][spender] = amount;\\n\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function balanceOf(address account) external view returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"COLO::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"COLO::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != uint96(-1)) {\\n      uint96 newAllowance =\\n        sub96(\\n          spenderAllowance,\\n          amount,\\n          \\\"COLO::transferFrom: transfer amount exceeds spender allowance\\\"\\n        );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 domainSeparator =\\n      keccak256(\\n        abi.encode(\\n          DOMAIN_TYPEHASH,\\n          keccak256(bytes(name)),\\n          getChainId(),\\n          address(this)\\n        )\\n      );\\n    bytes32 structHash =\\n      keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest =\\n      keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"COLO::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"COLO::delegateBySig: invalid nonce\\\");\\n    require(\\n      block.timestamp <= expiry,\\n      \\\"COLO::delegateBySig: signature expired\\\"\\n    );\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  function getPriorVotes(address account, uint256 blockNumber)\\n    public\\n    view\\n    returns (uint96)\\n  {\\n    require(\\n      blockNumber < block.number,\\n      \\\"COLO::getPriorVotes: not yet determined\\\"\\n    );\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(\\n    address src,\\n    address dst,\\n    uint96 amount\\n  ) internal {\\n    require(!transferBlocked, \\\"COLO::_transferTokens: Transfers are blocked\\\");\\n    require(\\n      src != address(0),\\n      \\\"COLO::_transferTokens: cannot transfer from the zero address\\\"\\n    );\\n    require(\\n      dst != address(this),\\n      \\\"COLO::_transferTokens: cannot transfer to the COLO address\\\"\\n    );\\n\\n    balances[src] = sub96(\\n      balances[src],\\n      amount,\\n      \\\"COLO::_transferTokens: transfer amount exceeds balance\\\"\\n    );\\n    balances[dst] = add96(\\n      balances[dst],\\n      amount,\\n      \\\"COLO::_transferTokens: transfer amount overflows\\\"\\n    );\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(\\n    address srcRep,\\n    address dstRep,\\n    uint96 amount\\n  ) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld =\\n          srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew =\\n          sub96(srcRepOld, amount, \\\"COLO::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld =\\n          dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew =\\n          add96(dstRepOld, amount, \\\"COLO::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber =\\n      safe32(\\n        block.number,\\n        \\\"COLO::_writeCheckpoint: block number exceeds 32 bits\\\"\\n      );\\n\\n    if (\\n      nCheckpoints > 0 &&\\n      checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n    ) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage)\\n    internal\\n    pure\\n    returns (uint32)\\n  {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint256 n, string memory errorMessage)\\n    internal\\n    pure\\n    returns (uint96)\\n  {\\n    require(n < 2**96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal pure returns (uint256) {\\n    uint256 chainId;\\n    /* solium-disable-next-line */\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0x7c04400356c4be29f2ba1883c8a1ed6bcb4a8b3b656daf5378a12ae18e747244\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080553480156200001557600080fd5b50604051620027ef380380620027ef833981016040819052620000389162000178565b600080546001600160a01b0386168083526003602052604080842080546001600160601b0319166001600160601b0390941693909317909255825491519092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91620000a69190620001ee565b60405180910390a36001600160a01b038085166000908152600160208190526040808320805460ff19908116841790915587851684528184208054821684179055868516845281842080548216841790559385168352808320805490941690911790925590517f3c091dafb1d99e4a4c333024492eac3b2cd8bf921a3dd547c937db33be307bb8916200013b918690620001d4565b60405180910390a150506005805460ff1916600117905550620001f79050565b80516001600160a01b03811681146200017357600080fd5b919050565b600080600080608085870312156200018e578384fd5b62000199856200015b565b9350620001a9602086016200015b565b9250620001b9604086016200015b565b9150620001c9606086016200015b565b905092959194509250565b6001600160a01b0392831681529116602082015260400190565b90815260200190565b6125e880620002076000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063b4b5ea5711610097578063dd62ed3e11610071578063dd62ed3e1461037c578063e7a324dc1461038f578063f1127ed814610397578063f46eccc4146103b8576101a9565b8063b4b5ea5714610343578063c3cda52014610356578063d505accf14610369576101a9565b806395d89b41116100d357806395d89b4114610302578063983b2d561461030a5780639dc29fac1461031d578063a9059cbb14610330576101a9565b806370a08231146102bc578063782d6fe1146102cf5780637ecebe00146102ef576101a9565b806330adf81f116101665780634804e1a2116101405780634804e1a214610261578063587cde1e146102695780635c19a95c146102895780636fcfff451461029c576101a9565b806330adf81f14610231578063313ce5671461023957806340c10f191461024e576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ec57806320606b701461020157806323b872dd146102095780633092afd51461021c575b600080fd5b6101b66103cb565b6040516101c39190611dd3565b60405180910390f35b6101df6101da366004611c1e565b6103ef565b6040516101c39190611d25565b6101f46104ae565b6040516101c39190611d30565b6101f46104b4565b6101df610217366004611b7a565b6104d8565b61022f61022a366004611b2e565b61061f565b005b6101f46106b1565b6102416106d5565b6040516101c3919061232b565b61022f61025c366004611c1e565b6106da565b6101df6108a2565b61027c610277366004611b2e565b6108ab565b6040516101c39190611cf7565b61022f610297366004611b2e565b6108c6565b6102af6102aa366004611b2e565b6108d3565b6040516101c391906122fb565b6101f46102ca366004611b2e565b6108eb565b6102e26102dd366004611c1e565b610913565b6040516101c39190612339565b6101f46102fd366004611b2e565b610b21565b6101b6610b33565b61022f610318366004611b2e565b610b53565b61022f61032b366004611c1e565b610be2565b6101df61033e366004611c1e565b610d6f565b6102e2610351366004611b2e565b610dab565b61022f610364366004611c47565b610e1c565b61022f610377366004611bb5565b611022565b6101f461038a366004611b48565b611324565b6101f4611358565b6103aa6103a5366004611c9e565b61137c565b6040516101c392919061230c565b6101df6103c6366004611b2e565b6113b1565b60405180604001604052806008815260200167436f6c6f7244414f60c01b81525081565b600080600019831415610405575060001961042a565b61042783604051806060016040528060258152602001612433602591396113c6565b90505b3360008181526002602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061049a908590612339565b60405180910390a360019150505b92915050565b60005481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526002602090815260408083203380855290835281842054825160608101909352602580845291936001600160601b039091169285926105309288929190612433908301396113c6565b9050866001600160a01b0316836001600160a01b03161415801561055d57506001600160601b0382811614155b1561060757600061058783836040518060600160405280603d81526020016123b0603d91396113f5565b6001600160a01b038981166000818152600260209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105fd908590612339565b60405180910390a3505b610612878783611434565b5060019695505050505050565b3360009081526001602052604090205460ff166106575760405162461bcd60e51b815260040161064e90611f27565b60405180910390fd5b7f4b5ef9a786cf64a7d82ebcf2d5132667edc9faef4ac36260d9a9e52c526b62323382604051610688929190611d0b565b60405180910390a16001600160a01b03166000908152600160205260409020805460ff19169055565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b3360009081526001602052604090205460ff166107095760405162461bcd60e51b815260040161064e90612105565b6001600160a01b03821661072f5760405162461bcd60e51b815260040161064e90612149565b6001600160a01b0382163014156107585760405162461bcd60e51b815260040161064e90611e26565b600061077c82604051806060016040528060228152602001612411602291396113c6565b90506107b4610796600054836001600160601b0316611600565b604051806060016040528060278152602001612389602791396113c6565b6001600160601b0390811660009081556001600160a01b03851681526003602090815260409182902054825160608101909352602580845261080694919091169285929091906124e49083013961165a565b6001600160a01b03841660008181526003602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610870908590612339565b60405180910390a36001600160a01b0380841660009081526004602052604081205461089d921683611696565b505050565b60055460ff1681565b6004602052600090815260409020546001600160a01b031681565b6108d03382611828565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b0381166000908152600360205260409020546001600160601b03165b919050565b60004382106109345760405162461bcd60e51b815260040161064e906120be565b6001600160a01b03831660009081526007602052604090205463ffffffff16806109625760009150506104a8565b6001600160a01b038416600090815260066020908152604080832063ffffffff6000198601811685529252909120541683106109de576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b031690506104a8565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610a195760009150506104a8565b600060001982015b8163ffffffff168163ffffffff161115610adc57600282820363ffffffff16048103610a4b611aef565b506001600160a01b038716600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610ab7576020015194506104a89350505050565b805163ffffffff16871115610ace57819350610ad5565b6001820392505b5050610a21565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60086020526000908152604090205481565b60405180604001604052806004815260200163434f4c4f60e01b81525081565b3360009081526001602052604090205460ff16610b825760405162461bcd60e51b815260040161064e9061229e565b7f3c091dafb1d99e4a4c333024492eac3b2cd8bf921a3dd547c937db33be307bb83382604051610bb3929190611d0b565b60405180910390a16001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b3360009081526001602052604090205460ff16610c115760405162461bcd60e51b815260040161064e90611f84565b6001600160a01b038216610c375760405162461bcd60e51b815260040161064e90611e75565b6000610c5b82604051806060016040528060228152602001612411602291396113c6565b9050610cb860036000856001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160601b031682604051806060016040528060218152602001612368602191396113f5565b6001600160a01b038416600090815260036020526040812080546001600160601b0319166001600160601b0393841617905554610d1991610cfb919084166118b2565b60405180606001604052806027815260200161258c602791396113c6565b6001600160601b031660009081556040516001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d62908590612339565b60405180910390a3505050565b600080610d9483604051806060016040528060268152602001612458602691396113c6565b9050610da1338583611434565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610dd6576000610e15565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b604080518082019091526008815267436f6c6f7244414f60c01b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fbc846071de0a82875fc17f3ea0c927d3583a76d9e89cd1209e0bd51e1e7b7f29610e8861190f565b30604051602001610e9c9493929190611d91565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610eed9493929190611d6d565b60405160208183030381529060405280519060200120905060008282604051602001610f1a929190611cdc565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610f579493929190611db5565b6020604051602081039080840390855afa158015610f79573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610fac5760405162461bcd60e51b815260040161064e90611eaa565b6001600160a01b03811660009081526008602052604090208054600181019091558914610feb5760405162461bcd60e51b815260040161064e90611fff565b8742111561100b5760405162461bcd60e51b815260040161064e90612078565b611015818b611828565b505050505b505050505050565b6000600019861415611037575060001961105c565b611059866040518060600160405280602481526020016123ed602491396113c6565b90505b604080518082019091526008815267436f6c6f7244414f60c01b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fbc846071de0a82875fc17f3ea0c927d3583a76d9e89cd1209e0bd51e1e7b7f296110c861190f565b306040516020016110dc9493929190611d91565b60408051601f1981840301815282825280516020918201206001600160a01b038d16600090815260088352928320805460018101909155909450919261114e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e9101611d39565b6040516020818303038152906040528051906020012090506000828260405160200161117b929190611cdc565b6040516020818303038152906040528051906020012090506000600182898989604051600081526020016040526040516111b89493929190611db5565b6020604051602081039080840390855afa1580156111da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661120d5760405162461bcd60e51b815260040161064e90612041565b8b6001600160a01b0316816001600160a01b03161461123e5760405162461bcd60e51b815260040161064e90611ef0565b8842111561125e5760405162461bcd60e51b815260040161064e90611fc8565b84600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161130e9190612339565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60016020526000908152604090205460ff1681565b600081600160601b84106113ed5760405162461bcd60e51b815260040161064e9190611dd3565b509192915050565b6000836001600160601b0316836001600160601b03161115829061142c5760405162461bcd60e51b815260040161064e9190611dd3565b505050900390565b60055460ff16156114575760405162461bcd60e51b815260040161064e90612252565b6001600160a01b03831661147d5760405162461bcd60e51b815260040161064e906121f5565b6001600160a01b0382163014156114a65760405162461bcd60e51b815260040161064e90612198565b6001600160a01b0383166000908152600360209081526040918290205482516060810190935260368084526114f1936001600160601b03909216928592919061247e908301396113f5565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352603080845261155994919091169285929091906124b49083013961165a565b6001600160a01b038381166000818152600360205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115c6908590612339565b60405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461089d92918216911683611696565b600082820183811015610e15576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000838301826001600160601b03808716908316101561168d5760405162461bcd60e51b815260040161064e9190611dd3565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156116c157506000816001600160601b0316115b1561089d576001600160a01b03831615611779576001600160a01b03831660009081526007602052604081205463ffffffff169081611701576000611740565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006117678285604051806060016040528060288152602001612509602891396113f5565b905061177586848484611913565b5050505b6001600160a01b0382161561089d576001600160a01b03821660009081526007602052604081205463ffffffff1690816117b45760006117f3565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061181a82856040518060600160405280602781526020016125316027913961165a565b905061101a85848484611913565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46118ac828483611696565b50505050565b600082821115611909576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b4690565b60006119374360405180606001604052806034815260200161255860349139611ac8565b905060008463ffffffff1611801561198057506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b156119df576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03851602179055611a7e565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248484604051611ab992919061234d565b60405180910390a25050505050565b600081600160201b84106113ed5760405162461bcd60e51b815260040161064e9190611dd3565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461090e57600080fd5b803560ff8116811461090e57600080fd5b600060208284031215611b3f578081fd5b610e1582611b06565b60008060408385031215611b5a578081fd5b611b6383611b06565b9150611b7160208401611b06565b90509250929050565b600080600060608486031215611b8e578081fd5b611b9784611b06565b9250611ba560208501611b06565b9150604084013590509250925092565b600080600080600080600060e0888a031215611bcf578283fd5b611bd888611b06565b9650611be660208901611b06565b95506040880135945060608801359350611c0260808901611b1d565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c30578182fd5b611c3983611b06565b946020939093013593505050565b60008060008060008060c08789031215611c5f578182fd5b611c6887611b06565b95506020870135945060408701359350611c8460608801611b1d565b92506080870135915060a087013590509295509295509295565b60008060408385031215611cb0578182fd5b611cb983611b06565b9150602083013563ffffffff81168114611cd1578182fd5b809150509250929050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015611dff57858101830151858201604001528201611de3565b81811115611e105783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602f908201527f434f4c4f3a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201526e686520434f4c4f206164647265737360881b606082015260800190565b6020808252818101527f434f4c4f3a206275726e2066726f6d20746865207a65726f2061646472657373604082015260600190565b60208082526026908201527f434f4c4f3a3a64656c656761746542795369673a20696e76616c6964207369676040820152656e617475726560d01b606082015260800190565b6020808252601a908201527f434f4c4f3a3a7065726d69743a20756e617574686f72697a6564000000000000604082015260600190565b60208082526038908201527f434f4c4f3a3a6164644d696e7465723a206f6e6c7920746865206d696e74657260408201527f2063616e206368616e676520746865206d696e74657273200000000000000000606082015260800190565b60208082526024908201527f434f4c4f3a3a6d696e743a206f6e6c7920746865206d696e7465722063616e20604082015263313ab93760e11b606082015260800190565b6020808252601f908201527f434f4c4f3a3a7065726d69743a207369676e6174757265206578706972656400604082015260600190565b60208082526022908201527f434f4c4f3a3a64656c656761746542795369673a20696e76616c6964206e6f6e604082015261636560f01b606082015260800190565b6020808252601f908201527f434f4c4f3a3a7065726d69743a20696e76616c6964207369676e617475726500604082015260600190565b60208082526026908201527f434f4c4f3a3a64656c656761746542795369673a207369676e617475726520656040820152651e1c1a5c995960d21b606082015260800190565b60208082526027908201527f434f4c4f3a3a6765745072696f72566f7465733a206e6f742079657420646574604082015266195c9b5a5b995960ca1b606082015260800190565b60208082526024908201527f434f4c4f3a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206040820152631b5a5b9d60e21b606082015260800190565b6020808252602f908201527f434f4c4f3a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201526e6865207a65726f206164647265737360881b606082015260800190565b6020808252603a908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f2074686520434f4c4f2061646472657373000000000000606082015260800190565b6020808252603c908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e736665722066726f6d20746865207a65726f206164647265737300000000606082015260800190565b6020808252602c908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a205472616e736665727360408201526b08185c9948189b1bd8dad95960a21b606082015260800190565b60208082526037908201527f434f4c4f3a3a6164644d696e7465723a206f6e6c7920746865206d696e74657260408201527f2063616e206368616e676520746865206d696e74657273000000000000000000606082015260800190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b039283168152911660208201526040019056fe434f4c4f3a206275726e20616d6f756e7420657863656564732062616c616e6365434f4c4f3a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473434f4c4f3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365434f4c4f3a3a7065726d69743a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a6d696e743a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a617070726f76653a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365434f4c4f3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773434f4c4f3a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773434f4c4f3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773434f4c4f3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773434f4c4f3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473434f4c4f3a3a6275726e3a20746f74616c537570706c7920657863656564732039362062697473a26469706673582212201ed93e82934719c75d8f99527ea2567b9ca0e93adc5f93bf700490aae7d1117f64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063b4b5ea5711610097578063dd62ed3e11610071578063dd62ed3e1461037c578063e7a324dc1461038f578063f1127ed814610397578063f46eccc4146103b8576101a9565b8063b4b5ea5714610343578063c3cda52014610356578063d505accf14610369576101a9565b806395d89b41116100d357806395d89b4114610302578063983b2d561461030a5780639dc29fac1461031d578063a9059cbb14610330576101a9565b806370a08231146102bc578063782d6fe1146102cf5780637ecebe00146102ef576101a9565b806330adf81f116101665780634804e1a2116101405780634804e1a214610261578063587cde1e146102695780635c19a95c146102895780636fcfff451461029c576101a9565b806330adf81f14610231578063313ce5671461023957806340c10f191461024e576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101ec57806320606b701461020157806323b872dd146102095780633092afd51461021c575b600080fd5b6101b66103cb565b6040516101c39190611dd3565b60405180910390f35b6101df6101da366004611c1e565b6103ef565b6040516101c39190611d25565b6101f46104ae565b6040516101c39190611d30565b6101f46104b4565b6101df610217366004611b7a565b6104d8565b61022f61022a366004611b2e565b61061f565b005b6101f46106b1565b6102416106d5565b6040516101c3919061232b565b61022f61025c366004611c1e565b6106da565b6101df6108a2565b61027c610277366004611b2e565b6108ab565b6040516101c39190611cf7565b61022f610297366004611b2e565b6108c6565b6102af6102aa366004611b2e565b6108d3565b6040516101c391906122fb565b6101f46102ca366004611b2e565b6108eb565b6102e26102dd366004611c1e565b610913565b6040516101c39190612339565b6101f46102fd366004611b2e565b610b21565b6101b6610b33565b61022f610318366004611b2e565b610b53565b61022f61032b366004611c1e565b610be2565b6101df61033e366004611c1e565b610d6f565b6102e2610351366004611b2e565b610dab565b61022f610364366004611c47565b610e1c565b61022f610377366004611bb5565b611022565b6101f461038a366004611b48565b611324565b6101f4611358565b6103aa6103a5366004611c9e565b61137c565b6040516101c392919061230c565b6101df6103c6366004611b2e565b6113b1565b60405180604001604052806008815260200167436f6c6f7244414f60c01b81525081565b600080600019831415610405575060001961042a565b61042783604051806060016040528060258152602001612433602591396113c6565b90505b3360008181526002602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061049a908590612339565b60405180910390a360019150505b92915050565b60005481565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526002602090815260408083203380855290835281842054825160608101909352602580845291936001600160601b039091169285926105309288929190612433908301396113c6565b9050866001600160a01b0316836001600160a01b03161415801561055d57506001600160601b0382811614155b1561060757600061058783836040518060600160405280603d81526020016123b0603d91396113f5565b6001600160a01b038981166000818152600260209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105fd908590612339565b60405180910390a3505b610612878783611434565b5060019695505050505050565b3360009081526001602052604090205460ff166106575760405162461bcd60e51b815260040161064e90611f27565b60405180910390fd5b7f4b5ef9a786cf64a7d82ebcf2d5132667edc9faef4ac36260d9a9e52c526b62323382604051610688929190611d0b565b60405180910390a16001600160a01b03166000908152600160205260409020805460ff19169055565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b3360009081526001602052604090205460ff166107095760405162461bcd60e51b815260040161064e90612105565b6001600160a01b03821661072f5760405162461bcd60e51b815260040161064e90612149565b6001600160a01b0382163014156107585760405162461bcd60e51b815260040161064e90611e26565b600061077c82604051806060016040528060228152602001612411602291396113c6565b90506107b4610796600054836001600160601b0316611600565b604051806060016040528060278152602001612389602791396113c6565b6001600160601b0390811660009081556001600160a01b03851681526003602090815260409182902054825160608101909352602580845261080694919091169285929091906124e49083013961165a565b6001600160a01b03841660008181526003602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610870908590612339565b60405180910390a36001600160a01b0380841660009081526004602052604081205461089d921683611696565b505050565b60055460ff1681565b6004602052600090815260409020546001600160a01b031681565b6108d03382611828565b50565b60076020526000908152604090205463ffffffff1681565b6001600160a01b0381166000908152600360205260409020546001600160601b03165b919050565b60004382106109345760405162461bcd60e51b815260040161064e906120be565b6001600160a01b03831660009081526007602052604090205463ffffffff16806109625760009150506104a8565b6001600160a01b038416600090815260066020908152604080832063ffffffff6000198601811685529252909120541683106109de576001600160a01b03841660009081526006602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b031690506104a8565b6001600160a01b038416600090815260066020908152604080832083805290915290205463ffffffff16831015610a195760009150506104a8565b600060001982015b8163ffffffff168163ffffffff161115610adc57600282820363ffffffff16048103610a4b611aef565b506001600160a01b038716600090815260066020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915290871415610ab7576020015194506104a89350505050565b805163ffffffff16871115610ace57819350610ad5565b6001820392505b5050610a21565b506001600160a01b038516600090815260066020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60086020526000908152604090205481565b60405180604001604052806004815260200163434f4c4f60e01b81525081565b3360009081526001602052604090205460ff16610b825760405162461bcd60e51b815260040161064e9061229e565b7f3c091dafb1d99e4a4c333024492eac3b2cd8bf921a3dd547c937db33be307bb83382604051610bb3929190611d0b565b60405180910390a16001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b3360009081526001602052604090205460ff16610c115760405162461bcd60e51b815260040161064e90611f84565b6001600160a01b038216610c375760405162461bcd60e51b815260040161064e90611e75565b6000610c5b82604051806060016040528060228152602001612411602291396113c6565b9050610cb860036000856001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160601b031682604051806060016040528060218152602001612368602191396113f5565b6001600160a01b038416600090815260036020526040812080546001600160601b0319166001600160601b0393841617905554610d1991610cfb919084166118b2565b60405180606001604052806027815260200161258c602791396113c6565b6001600160601b031660009081556040516001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d62908590612339565b60405180910390a3505050565b600080610d9483604051806060016040528060268152602001612458602691396113c6565b9050610da1338583611434565b5060019392505050565b6001600160a01b03811660009081526007602052604081205463ffffffff1680610dd6576000610e15565b6001600160a01b0383166000908152600660209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b604080518082019091526008815267436f6c6f7244414f60c01b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fbc846071de0a82875fc17f3ea0c927d3583a76d9e89cd1209e0bd51e1e7b7f29610e8861190f565b30604051602001610e9c9493929190611d91565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610eed9493929190611d6d565b60405160208183030381529060405280519060200120905060008282604051602001610f1a929190611cdc565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610f579493929190611db5565b6020604051602081039080840390855afa158015610f79573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610fac5760405162461bcd60e51b815260040161064e90611eaa565b6001600160a01b03811660009081526008602052604090208054600181019091558914610feb5760405162461bcd60e51b815260040161064e90611fff565b8742111561100b5760405162461bcd60e51b815260040161064e90612078565b611015818b611828565b505050505b505050505050565b6000600019861415611037575060001961105c565b611059866040518060600160405280602481526020016123ed602491396113c6565b90505b604080518082019091526008815267436f6c6f7244414f60c01b60209091015260007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8667fbc846071de0a82875fc17f3ea0c927d3583a76d9e89cd1209e0bd51e1e7b7f296110c861190f565b306040516020016110dc9493929190611d91565b60408051601f1981840301815282825280516020918201206001600160a01b038d16600090815260088352928320805460018101909155909450919261114e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928e928e928e9290918e9101611d39565b6040516020818303038152906040528051906020012090506000828260405160200161117b929190611cdc565b6040516020818303038152906040528051906020012090506000600182898989604051600081526020016040526040516111b89493929190611db5565b6020604051602081039080840390855afa1580156111da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661120d5760405162461bcd60e51b815260040161064e90612041565b8b6001600160a01b0316816001600160a01b03161461123e5760405162461bcd60e51b815260040161064e90611ef0565b8842111561125e5760405162461bcd60e51b815260040161064e90611fc8565b84600260008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160601b0302191690836001600160601b031602179055508a6001600160a01b03168c6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258760405161130e9190612339565b60405180910390a3505050505050505050505050565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600660209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b60016020526000908152604090205460ff1681565b600081600160601b84106113ed5760405162461bcd60e51b815260040161064e9190611dd3565b509192915050565b6000836001600160601b0316836001600160601b03161115829061142c5760405162461bcd60e51b815260040161064e9190611dd3565b505050900390565b60055460ff16156114575760405162461bcd60e51b815260040161064e90612252565b6001600160a01b03831661147d5760405162461bcd60e51b815260040161064e906121f5565b6001600160a01b0382163014156114a65760405162461bcd60e51b815260040161064e90612198565b6001600160a01b0383166000908152600360209081526040918290205482516060810190935260368084526114f1936001600160601b03909216928592919061247e908301396113f5565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352603080845261155994919091169285929091906124b49083013961165a565b6001600160a01b038381166000818152600360205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906115c6908590612339565b60405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461089d92918216911683611696565b600082820183811015610e15576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000838301826001600160601b03808716908316101561168d5760405162461bcd60e51b815260040161064e9190611dd3565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156116c157506000816001600160601b0316115b1561089d576001600160a01b03831615611779576001600160a01b03831660009081526007602052604081205463ffffffff169081611701576000611740565b6001600160a01b0385166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006117678285604051806060016040528060288152602001612509602891396113f5565b905061177586848484611913565b5050505b6001600160a01b0382161561089d576001600160a01b03821660009081526007602052604081205463ffffffff1690816117b45760006117f3565b6001600160a01b0384166000908152600660209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061181a82856040518060600160405280602781526020016125316027913961165a565b905061101a85848484611913565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46118ac828483611696565b50505050565b600082821115611909576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b4690565b60006119374360405180606001604052806034815260200161255860349139611ac8565b905060008463ffffffff1611801561198057506001600160a01b038516600090815260066020908152604080832063ffffffff6000198901811685529252909120548282169116145b156119df576001600160a01b0385166000908152600660209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b03851602179055611a7e565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600683528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248484604051611ab992919061234d565b60405180910390a25050505050565b600081600160201b84106113ed5760405162461bcd60e51b815260040161064e9190611dd3565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461090e57600080fd5b803560ff8116811461090e57600080fd5b600060208284031215611b3f578081fd5b610e1582611b06565b60008060408385031215611b5a578081fd5b611b6383611b06565b9150611b7160208401611b06565b90509250929050565b600080600060608486031215611b8e578081fd5b611b9784611b06565b9250611ba560208501611b06565b9150604084013590509250925092565b600080600080600080600060e0888a031215611bcf578283fd5b611bd888611b06565b9650611be660208901611b06565b95506040880135945060608801359350611c0260808901611b1d565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215611c30578182fd5b611c3983611b06565b946020939093013593505050565b60008060008060008060c08789031215611c5f578182fd5b611c6887611b06565b95506020870135945060408701359350611c8460608801611b1d565b92506080870135915060a087013590509295509295509295565b60008060408385031215611cb0578182fd5b611cb983611b06565b9150602083013563ffffffff81168114611cd1578182fd5b809150509250929050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b81811015611dff57858101830151858201604001528201611de3565b81811115611e105783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602f908201527f434f4c4f3a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201526e686520434f4c4f206164647265737360881b606082015260800190565b6020808252818101527f434f4c4f3a206275726e2066726f6d20746865207a65726f2061646472657373604082015260600190565b60208082526026908201527f434f4c4f3a3a64656c656761746542795369673a20696e76616c6964207369676040820152656e617475726560d01b606082015260800190565b6020808252601a908201527f434f4c4f3a3a7065726d69743a20756e617574686f72697a6564000000000000604082015260600190565b60208082526038908201527f434f4c4f3a3a6164644d696e7465723a206f6e6c7920746865206d696e74657260408201527f2063616e206368616e676520746865206d696e74657273200000000000000000606082015260800190565b60208082526024908201527f434f4c4f3a3a6d696e743a206f6e6c7920746865206d696e7465722063616e20604082015263313ab93760e11b606082015260800190565b6020808252601f908201527f434f4c4f3a3a7065726d69743a207369676e6174757265206578706972656400604082015260600190565b60208082526022908201527f434f4c4f3a3a64656c656761746542795369673a20696e76616c6964206e6f6e604082015261636560f01b606082015260800190565b6020808252601f908201527f434f4c4f3a3a7065726d69743a20696e76616c6964207369676e617475726500604082015260600190565b60208082526026908201527f434f4c4f3a3a64656c656761746542795369673a207369676e617475726520656040820152651e1c1a5c995960d21b606082015260800190565b60208082526027908201527f434f4c4f3a3a6765745072696f72566f7465733a206e6f742079657420646574604082015266195c9b5a5b995960ca1b606082015260800190565b60208082526024908201527f434f4c4f3a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206040820152631b5a5b9d60e21b606082015260800190565b6020808252602f908201527f434f4c4f3a3a6d696e743a2063616e6e6f74207472616e7366657220746f207460408201526e6865207a65726f206164647265737360881b606082015260800190565b6020808252603a908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e7366657220746f2074686520434f4c4f2061646472657373000000000000606082015260800190565b6020808252603c908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747260408201527f616e736665722066726f6d20746865207a65726f206164647265737300000000606082015260800190565b6020808252602c908201527f434f4c4f3a3a5f7472616e73666572546f6b656e733a205472616e736665727360408201526b08185c9948189b1bd8dad95960a21b606082015260800190565b60208082526037908201527f434f4c4f3a3a6164644d696e7465723a206f6e6c7920746865206d696e74657260408201527f2063616e206368616e676520746865206d696e74657273000000000000000000606082015260800190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b039283168152911660208201526040019056fe434f4c4f3a206275726e20616d6f756e7420657863656564732062616c616e6365434f4c4f3a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473434f4c4f3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365434f4c4f3a3a7065726d69743a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a6d696e743a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a617070726f76653a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473434f4c4f3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365434f4c4f3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773434f4c4f3a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773434f4c4f3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773434f4c4f3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773434f4c4f3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473434f4c4f3a3a6275726e3a20746f74616c537570706c7920657863656564732039362062697473a26469706673582212201ed93e82934719c75d8f99527ea2567b9ca0e93adc5f93bf700490aae7d1117f64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3505,
        "contract": "contracts/COLO.sol:COLO",
        "label": "totalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3509,
        "contract": "contracts/COLO.sol:COLO",
        "label": "minters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3515,
        "contract": "contracts/COLO.sol:COLO",
        "label": "allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 3519,
        "contract": "contracts/COLO.sol:COLO",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 3523,
        "contract": "contracts/COLO.sol:COLO",
        "label": "delegates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3525,
        "contract": "contracts/COLO.sol:COLO",
        "label": "transferBlocked",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 3536,
        "contract": "contracts/COLO.sol:COLO",
        "label": "checkpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)3530_storage))"
      },
      {
        "astId": 3540,
        "contract": "contracts/COLO.sol:COLO",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 3559,
        "contract": "contracts/COLO.sol:COLO",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)3530_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct COLO.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)3530_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)3530_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct COLO.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)3530_storage"
      },
      "t_struct(Checkpoint)3530_storage": {
        "encoding": "inplace",
        "label": "struct COLO.Checkpoint",
        "members": [
          {
            "astId": 3527,
            "contract": "contracts/COLO.sol:COLO",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3529,
            "contract": "contracts/COLO.sol:COLO",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}